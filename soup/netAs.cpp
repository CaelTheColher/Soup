#include "netAs.hpp"

#include "base64.hpp"
#include "netIntel.hpp"
#include "string.hpp"
#include "wasm.hpp"

namespace soup
{
	bool netAs::isHosting(const netIntel& intel) const SOUP_EXCAL
	{
		return isHosting(intel.extra_wasm);
	}

	bool netAs::isHosting() const SOUP_EXCAL
	{
		// Hard-coding https://github.com/calamity-inc/soup-extra-data/tree/fa17e3ebbf0f6fc6416f695d98e346ecc7c2ec68
		return isHosting(base64::decode("AGFzbQEAAAABDAJgAX8Bf2ACf38BfwMEAwAAAQUDAQAAByQCDmlzX2hvc3RpbmdfYXNuAAAPaXNfaG9zdGluZ19zbHVnAAEKgA0DoAgAIABBsSVGIABBjhlGciAAQdkwRnIgAEGkP0ZyIABB2MgARnIgAEHgyABGciAAQffIAEZyIABBt9wARnIgAEHm3ABGciAAQfblAEZyIABBnecARnIgAEG2ngFGciAAQfmfAUZyIABBmcYBRnIgAEGt5gFGciAAQYPrAUZyIABBgM8BRnIgAEGQ8AFGciAAQa6XAkZyIABBjqUCRnIgAEHLrgJGciAAQbezAkZyIABB5L0CRnIgAEHcxAJGciAAQZnSAkZyIABB+dMCRnIgAEGu4AJGciAAQcvmAkZyIABB4usCRnIgAEHV7QJGciAAQfztAkZyIABBwvUCRnIgAEG9hgNGciAAQYCJA0ZyIABBo5QDRnIgAEHHmQNGciAAQZWeA0ZyIABBxsYDRnIgAEGjowNGciAAQfCyA0ZyIABB0cUDRnIgAEHZxQNGciAAQaTVA0ZyIABBoOYDRnIgAEH/gAhGciAAQeuICEZyIABB6JIIRnIgAEHTrAhGciAAQcGtCEZyIABBr7AIRnIgAEHBsQhGciAAQe/NCEZyIABB784IRnIgAEGS+whGciAAQen8CEZyIABByogMRnIgAEHjjQxGciAAQc2PDEZyIABB3Y8MRnIgAEHklgxGciAAQf3BDEZyIABBv8IMRnIgAEHUzwxGciAAQY76DEZyIABBnYINRnIgAEGWjBBGciAAQaWyEEZyIABB1LABRnIgAEHwwgBGciAAQeb1AkZyIABBjuwCRnIgAEHMmAJGciAAQbweRnIgAEHHpANGciAAQcQ0RnIgAEHbkgFGciAAQYCcAkZyIABBt9UDRnIgAEGLP0ZyIABBuvQCRnIgAEHszAxGciAAQZjNCEZyIABB6csCRnIgAEGo0ANGciAAQb7nDEZyIABB3dICRnIgAEHq6AFGciAAQdKtA0ZyIABB3PcDRnIgAEGXGUZyIABBv7YCRnIgAEGh0gxGciAAQYKCDUZyIABBr7YYRnIgAEG62QNGciAAQd6JDEZyIABB1tICRnIgAEG19wNGciAAQY+BEEZyIABBxJgYRnIgAEGuvQJGciAAQZ3BDEZyIABB+vEARnIgAEHv/wFGciAAQdTNAkZyIABBrNcCRnIgAEGuAUZyIABB5RBGciAAQcYjRnIgAEHzMEZyIABBmzFGciAAQd4yRnIgAEHgMkZyIABBlTdGciAAQaI6RnIgAEGQ1ABGciAAQZDWAEZyIABB1NcARnIgAEGG2gBGciAAQa/fAEZyIABB94EBRnIgAEHclQFGciAAQdOsAUZyIABBzOQARnIgAEHLuwhGciAAQbqdGEZyIABBgcMBRnIgAEHEwwJGciAAQcadGEZyIABBtO8BRnIgAEHm7ABGciAAQbunA0ZyIABB/bEBRnIgAEG76QNGcgvyAwAgAEEcEAJBAEYEfyAAQQsQAkEARgVBAAsEfyAAQRYQAkEARwR/IABBARACQQBHBUEBCwVBAAsEfyAAQdAAEAJBAEYFQQALBH8gAEHEABACQQBGBUEACwR/IABB4AAQAkEARgVBAAsEfyAAQdsAEAJBAEYFQQALBH8gAEE/EAJBAEYFQQALBH8gAEE2EAJBAEcEfyAAQS0QAkEARwVBAQsFQQALBH8gAEEnEAJBAEYFQQALBH8gAEEgEAJBAEYFQQALBH8gAEE7EAJBAEYFQQALBH8gAEGBARACQQBGBUEACwR/IABBiQEQAkEARgVBAAsEfyAAQewAEAJBAEYFQQALBH8gAEH0ABACQQBGBUEACwR/IABBjQEQAkEARgVBAAsEfyAAQbcBEAJBAEYFQQALBH8gAEHCARACQQBGBUEACwR/IABBzgEQAkEARgVBAAsEfyAAQdUBEAJBAEYFQQALBH8gAEHfARACQQBGBUEACwR/IABBqQEQAkEARgVBAAsEfyAAQaIBEAJBAEYFQQALBH8gAEGcARACQQBGBUEACwR/IABBlAEQAkEARgVBAAsEfyAAQbABEAJBAEYFQQALBH8gAEHwARACQQBGBUEACwR/IABB5wEQAkEARgVBAAsEfyAAQfUBEAJBAEcFQQELC2gBAn8gAS0AAEUEQCAADwsDQCAALQAAIgIEQCACIAEtAABGBEAgASECIAAhAwNAIAItAABFBEAgAA8LIAMtAAAgAi0AAEYEQCACQQFqIQIgA0EBaiEDDAELCwsgAEEBaiEADAELC0EACwuwAyAAQQELCnRoZSBjbG91ZAAAQQsLC2NvbG9jYXRpb24AAEEWCwZjbG91ZAAAQRwLBGNkbgAAQSALB3NlcnZlcgAAQScLBmxheWVyAABBLQsJYWZyaWhvc3QAAEE2CwVob3N0AABBOwsEdnBzAABBPwsFZGVkaQAAQcQACwxkYXRhIGNlbnRlcgAAQdAACwtkYXRhY2VudGVyAABB2wALBWRkb3MAAEHgAAsMZGF0YS1jZW50ZXIAAEHsAAsIY29udGFibwAAQfQACw1kaWdpdGFsb2NlYW4AAEGBAQsIaGV0em5lcgAAQYkBCwRvdmgAAEGNAQsHYW1hem9uAABBlAELCGdvZGFkZHkAAEGcAQsGYXJ1YmEAAEGiAQsHbGlub2RlAABBqQELB2Zhc3RseQAAQbABCwdvcmFjbGUAAEG3AQsLZ29vZ2xlIGxsYwAAQcIBCwxnb29nbGUsIGxsYwAAQc4BCwdha2FtYWkAAEHVAQsKbWljcm9zb2Z0AABB3wELCGFsaWJhYmEAAEHnAQsJbGVhc2V3ZWIAAEHwAQsFbTI0NwAAQfUBCwVpcHhvAA=="));
	}

	bool netAs::isHosting(const std::string& extra_wasm) const SOUP_EXCAL
	{
		WasmScript ws;
		SOUP_IF_LIKELY (ws.load(extra_wasm))
		{
			// Checking ASN against https://github.com/calamity-inc/soup-extra-data/blob/senpai/src/is_hosting_asn.ts
			if (auto code = ws.getExportedFuntion("is_hosting_asn"))
			{
				WasmVm vm(ws);
				vm.locals.emplace_back(this->number);
				if (vm.run(*code)
					&& vm.stack.top()
					)
				{
					return true;
				}
			}

			// Checking slug against https://github.com/calamity-inc/soup-extra-data/blob/senpai/src/is_hosting_slug.c
			if (auto code = ws.getExportedFuntion("is_hosting_slug"))
			{
				std::string slug = this->handle;
				slug.push_back(' ');
				slug.append(this->name);
				string::lower(slug);

				if (ws.setMemory(0x9000, slug.data(), slug.size()))
				{
					WasmVm vm(ws);
					vm.locals.emplace_back(0x9000);
					if (vm.run(*code)
						&& vm.stack.top()
						)
					{
						return true;
					}
				}
			}
		}
		return false;
	}
}
